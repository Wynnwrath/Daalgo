import requests
import random
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

class WeatherRandom:
    def __init__(self):
        self.api_key = os.getenv("OWM_API_KEY")
        self.url = "https://api.openweathermap.org/data/2.5/weather"
        self.cities = [
            "Tokyo", "London", "New York", "Paris", "Berlin",
            "Sydney", "Toronto", "Seoul", "Moscow", "Rome"
        ]
        self.cache = {}
        self.cache_expire = timedelta(minutes=2)

    def get_weather(self, city):
        now = datetime.now()

        # Use cached data if it's still fresh
        if city in self.cache:
            cached_data, cached_time = self.cache[city]
            if now - cached_time < self.cache_expire:
                return cached_data

        # Otherwise fetch from API
        try:
            response = requests.get(self.url, params={
                "q": city,
                "appid": self.api_key,
                "units": "metric"
            }, timeout=5)
            response.raise_for_status()
            data = response.json()
            self.cache[city] = (data, now)
            return data
        except Exception as e:
            print(f"Error fetching weather for {city}: {e}")
            return None

    def generate_seed(self):
        # Select 3 random cities
        selected_cities = random.sample(self.cities, 3)
        seed = 0

        for city in selected_cities:
            weather = self.get_weather(city)
            if weather:
                main = weather.get("main", {})
                temp = main.get("temp", 0)
                humidity = main.get("humidity", 0)
                pressure = main.get("pressure", 0)
                seed += int(temp * 100) + humidity + pressure

        # Add time components for more randomness
        now = datetime.now()
        seed += now.year + now.month + now.day + now.hour + now.minute + now.second + now.microsecond

        return seed

    def random_float(self, min_val=0.0, max_val=1.0):
        seed = self.generate_seed()
        normalized = (seed % 10000) / 10000  # Normalize to 0-1 range
        return min_val + (max_val - min_val) * normalized

    def random_int(self, min_val=0, max_val=100):
        return int(self.random_float(min_val, max_val + 1))  # +1 to include max_val

if __name__ == "__main__":
    wr = WeatherRandom()
    
    print("Random float between 0.0 and 1.0:", wr.random_float())
    print("Random float between 1.5 and 3.5:", wr.random_float(1.5, 3.5))
    print("Random integer between 1 and 10:", wr.random_int(1, 10))
    print("Random integer between 50 and 100:", wr.random_int(50, 100))
