import requests
import random
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

class VortexRandom:
    def __init__(self):
        self.api_key = os.getenv("OWM_API_KEY")
        self.url = "https://api.openweathermap.org/data/2.5/weather"
        self.cities = ["Tokyo", "London", "New York", "Paris", "Berlin"]
        self.cache = {}
        self.cache_expire = timedelta(minutes=2)

    def get_weather(self, city):
        """Get weather data for a city with caching"""
        now = datetime.now()
        if city in self.cache:
            data, time_cached = self.cache[city]
            if now - time_cached < self.cache_expire:
                return data

        try:
            response = requests.get(self.url, params={
                "q": city,
                "appid": self.api_key,
                "units": "metric"
            }, timeout=5)
            response.raise_for_status()
            data = response.json()
            self.cache[city] = (data, now)
            return data
        except:
            return None

    def generate_seed(self):
        """Simplified seed generation using weather data and time"""
        # 1. Get real-world weather randomness
        city = random.choice(self.cities)  # Pick one random city
        weather = self.get_weather(city)
        
        # 2. Create seed from weather data (if available)
        weather_seed = 0
        if weather:
            main = weather["main"]
            weather_seed = sum([
                int(main.get("temp", 0) * 100),
                main.get("humidity", 0),
                main.get("pressure", 0)
            ])
        
        # 3. Add current time randomness
        now = datetime.now()
        time_seed = sum([
            now.year, now.month, now.day,
            now.hour, now.minute, now.second
        ])
        
        # 4. Combine both sources
        final_seed = weather_seed + time_seed
        random.seed(final_seed)
        return final_seed

    def random_number(self, min_val=0, max_val=1):
        """Generate random number between min and max"""
        self.generate_seed()  # Seed the random generator
        if isinstance(min_val, int) and isinstance(max_val, int):
            return random.randint(min_val, max_val)
        return round(random.uniform(min_val, max_val), 4)

# Example usage remains the same
if __name__ == "__main__":
    wr = WeatherRandom()
    print("Float between 0.0 and 1.0:", wr.random_number(0.0, 1.0))
    print("Integer between 5 and 5:", wr.random_number(5, 5))
    print("Integer between 10 and 100:", wr.random_number(10, 100))
